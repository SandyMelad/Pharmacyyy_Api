// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy_ASP_API.Models;

#nullable disable

namespace Pharmacy_ASP_API.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20250526013146_firstmigration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.MedicationKnowledge", b =>
                {
                    b.Property<string>("MedicationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClinicalUse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Expirydate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StockId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("MedicationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StockId");

                    b.ToTable("MedicationKnowledges");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.MedicationRequest", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DoseInstruction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrInBed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrOutBed")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StatusTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("authoredTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RequestId");

                    b.ToTable("MedicationRequests");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicationRequestId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StockId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MedicationRequestId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("ReportId");

                    b.HasIndex("StockId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("StockAcidPrice")
                        .HasColumnType("int");

                    b.Property<int>("TotalSales")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Stock", b =>
                {
                    b.Property<string>("StockId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarningDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.MedicationKnowledge", b =>
                {
                    b.HasOne("Pharmacy_ASP_API.Models.Entities.Order", null)
                        .WithMany("MedicationKnowledges")
                        .HasForeignKey("OrderId");

                    b.HasOne("Pharmacy_ASP_API.Models.Entities.Stock", "Stock")
                        .WithMany("MedicationKnowledges")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Order", b =>
                {
                    b.HasOne("Pharmacy_ASP_API.Models.Entities.MedicationKnowledge", "Medication")
                        .WithMany("Orders")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy_ASP_API.Models.Entities.MedicationRequest", "MedicationRequest")
                        .WithOne("Order")
                        .HasForeignKey("Pharmacy_ASP_API.Models.Entities.Order", "MedicationRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pharmacy_ASP_API.Models.Entities.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy_ASP_API.Models.Entities.Report", "Report")
                        .WithMany("Orders")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pharmacy_ASP_API.Models.Entities.Stock", "Stock")
                        .WithMany("Orders")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("MedicationRequest");

                    b.Navigation("Patient");

                    b.Navigation("Report");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.MedicationKnowledge", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.MedicationRequest", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Order", b =>
                {
                    b.Navigation("MedicationKnowledges");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Patient", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Report", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Pharmacy_ASP_API.Models.Entities.Stock", b =>
                {
                    b.Navigation("MedicationKnowledges");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
